{"version":3,"sources":["components/chatsComponent.js","components/HeaderHistory.js","components/HistoryComponent.js","components/SendMassageComonent.js","constans/constans.js","App.js","index.js"],"names":["ChatsComponent","contacts","hendlerSerch","hendlerChooseContact","searchStr","filteredContacts","sort","a","b","history","length","filter","contact","name","toLowerCase","includes","className","src","alt","type","placeholder","onChange","value","map","lastMassage","key","id","onClick","date","massage","HeaderHistory","choosedContact","startValue","icon","HistoryComponent","massageElement","massageFromMe","time","SendMassageComponent","sendMassage","getDateAndTime","getMassage","hendlerSendMassage","useEffect","document","addEventListener","target","code","sendMassageInput","querySelector","prevChoosedContact","find","active","setTimeout","DEFAULT_CONTACTS","App","useState","setContacts","setSearchStr","getLocalStorage","setLocalStorage","contactList","localStorage","setItem","JSON","stringify","parse","getItem","Date","min","getMinutes","minForSroting","getSeconds","monthInShortStr","toLocaleDateString","month","getMonth","dateOfMassage","getDate","getFullYear","getHours","activUser","push","getMassageFromUser","fetch","promise","json","massageFromServer","massageFromUser","event","targetContactName","currentTarget","childNodes","innerHTML","activeUser","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c2e07996.chunk.js","sourcesContent":["import React from 'react';\n\nconst ChatsComponent = ({contacts, hendlerSerch, hendlerChooseContact, searchStr}) => {\n    const filteredContacts = searchStr === '' \n            ? contacts.sort((a, b) => b.history[b.history.length - 1].sort - a.history[a.history.length - 1].sort)\n            : contacts.filter((contact) => contact.name.toLowerCase().includes(searchStr.toLowerCase()))    \n    return (\n        <>\n            <div className=\"leftSidebar\">\n                <img className=\"userImg\" src=\"images/profileIcon/myIcon.png\"  alt=\"user\"/>\n                <input className=\"searchInput\" type=\"text\" placeholder=\"Search or start new chat\" onChange={hendlerSerch} value={searchStr}/>\n                <img className=\"searchIcon\" src=\"images/search.png\" alt=\"Search Icon\"/>\n                <div className=\"chats\">\n                    <div className=\"row\">Chats</div>\n                    <ul>\n                        {filteredContacts.map((contact) => {\n                        const {history} = contact\n                        const lastMassage = history[history.length - 1] \n                        return (\n                            <li key = {contact.id} className = \"contact\" onClick = {hendlerChooseContact}>\n                                <img className=\"contactPic\" src=\"images/profileIcon/myIcon.png\" alt=\"Contact Pic\"/>\n                                <div className=\"date\">{lastMassage.date}</div>\n                                <p className=\"contactName\">{contact.name}</p>\n                                <div className=\"contactMassage\">{lastMassage.massage}</div>\n                            </li> )}\n                        )} \n                    </ul>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default ChatsComponent;","import React from 'react';\n\nconst HeaderHistory = ({choosedContact = {}}) => {\n    const startValue = {name: 'Select contact to start chating !', icon:'/images/counting.png'}\n    \n    return (\n        <div className=\"headerConteiner\">\n            <img className=\"historyIcon\" src={choosedContact.icon || startValue.icon} alt=\"icon\"/>\n            <div className=\"historyContactName\">{choosedContact.name || startValue.name}</div>\n        </div>\n    )\n}\n\nexport default HeaderHistory;","import React from 'react';\n\nconst HistoryComponent = ({choosedContact = {}}) => (\n    <div className=\"sectionHistory\"> \n            {(choosedContact.history || []).map((massageElement) => (\n                massageElement.massageFromMe === false \n                    ? (\n                        <div className=\"massageConteiner\">\n                            <div className=\"userMassage\">\n                                <img className=\"userMassagePic\" src=\"images/profileIcon/myIcon.png\" alt=\"profile\"/>\n                                <div className=\"textOfMassage\">{massageElement.massage}</div>\n                            </div>\n                            <div className=\"massageDate\">{massageElement.time}</div>\n                        </div>\n                    ) : (\n                        <div className=\"myMassageConteiner\">\n                            <div className=\"myMassageBlock\">  \n                                <div className=\"myTextMassage\">{massageElement.massage}</div>\n                                <div className=\"myMassageDate\">{massageElement.time}</div>\n                            </div>  \n                        </div>\n                    )\n            ))}\n        </div>\n    )\n\n\nexport default HistoryComponent;","import React, {useEffect} from 'react';\n\nconst SendMassageComponent = ({sendMassage, getDateAndTime, getMassage, contacts, hendlerSendMassage}) => {\n\n    \n    useEffect(() => {\n        document.addEventListener(\"keydown\", ({target, code}) =>{\n            const sendMassageInput = document.querySelector(\".inputSendMassage\")\n    \n            if (sendMassageInput.value === '') return;\n            \n            if (code === 'Enter') {\n                const prevChoosedContact = contacts.find((contact) => contact.active === true)\n                \n                sendMassage({\n                    massage: sendMassageInput.value, \n                    time: getDateAndTime()[0],\n                    date: getDateAndTime()[1],\n                    sort: getDateAndTime()[2],\n                    massageFromMe: true\n                })\n                sendMassageInput.value = ''\n                setTimeout(() => getMassage(prevChoosedContact), 10000)\n            }\n        }) \n    }, []) \n\n    return (\n        <div className=\"sectionInput\">\n            <input className=\"inputSendMassage\" type=\"text\" placeholder=\"Type your massage\"></input>\n            <button onClick={hendlerSendMassage} className=\"sendButton\"><img className=\"sendIcon\" src=\"/images/send.png\" alt=\"Send Icon\"/></button>\n        </div>\n    )\n}\n\nexport default SendMassageComponent;","\n\nexport const DEFAULT_CONTACTS = [\n  {name: 'Alic Freeman', id: 1, active: false, icon:\"/images/profileIcon/girl.png\" , history: [{massage:'Hi!', date:'Oct 29', time: '10/29/2020 23:50', sort: '1', massageFromMe: false},{massage:'Hi!', date:'Oct 29', time: '10/29/2020 23:50',sort: '2', massageFromMe: true}]}, \n  {name:'John', id: 0, active: false, icon:\"/images/profileIcon/boy.png\", history: [{massage:'Where are you ?', date:'Oct 29', time: '10/29/2020 23:50', sort: '3', massageFromMe: false}]}, \n  {name:'Barrera', id: 2, active: false, icon:\"/images/profileIcon/boy 1.png\", history: [{massage: 'We lost money!!', date:'Oct 29', time: '10/29/2020 23:50', sort: '4', massageFromMe: false}]}, \n  {name:'Chuck', id: 3, active: false, icon:\"/images/profileIcon/rocker.png\", history: [{massage: 'we lost money!!', date:'Oct 29', time: '10/29/2020 23:50', sort: '5', massageFromMe: false}]}\n];\n\nexport const CONTACTS = 'CONTACTS';\n\nexport const URL = 'https://api.chucknorris.io/jokes/random'","import React, {useState, useEffect} from 'react';\nimport ChatsComponent from './components/chatsComponent';\nimport HeaderHistory from './components/HeaderHistory';\nimport HistoryComponent from './components/HistoryComponent';\nimport SendMassageComponent from './components/SendMassageComonent';\nimport {DEFAULT_CONTACTS, URL, CONTACTS} from './constans/constans'\n\nconst App = () => {\n  \n  const [contacts, setContacts] = useState(DEFAULT_CONTACTS)\n  const [searchStr, setSearchStr] = useState('')\n  \n  useEffect(() => {\n    getLocalStorage()\n  }, [])\n\n  const setLocalStorage = (contactList) => {\n    localStorage.setItem(CONTACTS, JSON.stringify(contactList));\n  }\n\n  const getLocalStorage = () => {\n    const contactsFromLockalStorage = JSON.parse(localStorage.getItem(CONTACTS));\n    \n    setContacts(null || DEFAULT_CONTACTS) // Коли в SetContacts замість null пердаю contactsFromLockalStorage\n    // то useState починає себе дуже дивно вести - він постійно заново створюється так як він спрацьовує перед першим рендером, \n    //я гуглив про це і намагався зрозуміти чому він так дивно себе веде але так і не знайшов ніякої інформації з цього приводу.\n    \n  }\n\n  const hendlerSerch = (event) => {\n    setSearchStr(event.target.value)\n    \n    if (event.target.value === '') {\n      setContacts(DEFAULT_CONTACTS)\n    }\n  }\n\n  const hendlerSendMassage = (event) =>{\n    const sendMassageInput = document.querySelector(\".inputSendMassage\")\n    \n    if (sendMassageInput.value === '') return;\n    const prevChoosedContact = contacts.find((contact) => contact.active === true)\n    \n    sendMassage({\n      massage: sendMassageInput.value, \n      time: getDateAndTime()[0],\n      date: getDateAndTime()[1],\n      sort: getDateAndTime()[2],\n      massageFromMe: true\n    })\n      sendMassageInput.value = ''\n      setTimeout(() => getMassage(prevChoosedContact), 10000)\n            \n  }\n\n  const getDateAndTime = () => {\n    const date = new Date ()\n    const min = date.getMinutes()\n    const minForSroting = date.getMinutes() * 60 + date.getSeconds()\n    const monthInShortStr = date.toLocaleDateString(\"en-US\", { month: 'short' })\n    const month = date.getMonth() + 1\n    const dateOfMassage = `${monthInShortStr} ${date.getDate()}`\n    const timeAndDateOfMassage = `${month < 10 ? '0' + month : month}/${date.getDate()}/${date.getFullYear()} \n    ${date.getHours()}:${min < 10 ? '0' + min : min}`\n\n    return [timeAndDateOfMassage, dateOfMassage, minForSroting]\n  }\n\n  const hendlerChooseContact = (event) => {\n    let targetContactName = event.currentTarget.childNodes[2].innerHTML\n    let contact = contacts.find((contact) => contact.name === targetContactName)\n    const activeUser = contacts.find((contact) => contact.active === true)\n    \n    if (activeUser) {\n      activeUser.active = false\n    }\n\n    setSearchStr('')\n    contact.active = true\n    setContacts([...contacts])\n  }\n\n  const sendMassage = (massage) => {\n    const activUser = contacts.find((contact) => contact.active === true)\n    \n    activUser && activUser.history.push(massage)\n\n    setLocalStorage(contacts)\n    setContacts([...contacts])\n  }\n\n  const getMassageFromUser = (massage, prevChoosedContact) => {\n    prevChoosedContact && prevChoosedContact.history.push(massage)\n\n    setLocalStorage(contacts)\n    setContacts([...contacts])\n  }\n\n  const getMassage = async (prevChoosedContact) => {\n    const promise = await fetch(URL)\n    const massageFromServer = await promise.json()\n    const massageFromUser = {massage: massageFromServer.value, date: getDateAndTime()[1], time: getDateAndTime()[0], sort:getDateAndTime()[2], massageFromMe: false}\n    \n    \n    getMassageFromUser(massageFromUser, prevChoosedContact)\n  }\n\n  const activUser = contacts.find((contact) => contact.active === true)\n  \n  return (\n    <div className=\"mainConteiner\">\n      <ChatsComponent searchStr={searchStr} hendlerChooseContact={hendlerChooseContact} contacts={contacts} hendlerSerch={hendlerSerch} />\n      <div className=\"headerHistory\">\n        <HeaderHistory choosedContact={activUser} />\n        <HistoryComponent choosedContact={activUser} />\n        <SendMassageComponent sendMassage={sendMassage} hendlerSendMassage={hendlerSendMassage} getDateAndTime={getDateAndTime} getMassage={getMassage} contacts={contacts}/>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  \n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}